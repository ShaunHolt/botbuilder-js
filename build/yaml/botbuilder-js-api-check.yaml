
# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  name: Azure Pipelines
  vmImage: 'macOS-10.15'

variables:
  version: 4.0.0-0

steps:
- task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
  displayName: 'Tag Build with version number. (Skip if a fork PR to avoid access denied error.)'
  inputs:
    tags: 'Version=$(version)'
  continueOnError: true
  condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'false'))

- task: NodeTool@0
  displayName: 'Use Node 10.x'
  inputs:
    versionSpec: 10.x

- task: Npm@1
  displayName: 'npm install lerna ...'
  inputs:
    command: custom
    verbose: false
    customCommand: 'install --global lerna@3.2.1 nyc mocha'

- task: Npm@1
  displayName: 'npm i -g @microsoft/api-extractor'
  inputs:
    command: custom
    verbose: false
    customCommand: 'i -g @microsoft/api-extractor@7.7.10'

- task: Npm@1
  displayName: '/tools npm install'
  inputs:
    workingDir: tools
    verbose: false
  enabled: false

- task: Npm@1
  displayName: 'npm install coveralls --save-dev'
  inputs:
    command: custom
    workingDir: tools
    verbose: false
    customCommand: 'install coveralls --save-dev'
  enabled: false

- bash: |
   sed -i '' 's/${Version}/$(version)/g' package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/adaptive-expressions/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/bot-integration-tests/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-ai/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-applicationinsights/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-azure/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-core/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-dialogs/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-dialogs-adaptive/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-dialogs-adaptive-tests/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-dialogs-declarative/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-lg/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botbuilder-testing/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botframework-config/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botframework-connector/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botframework-schema/package.json
   sed -i '' 's/${Version}/$(version)/g' libraries/botframework-streaming/package.json
   
  failOnStderr: true
  displayName: 'Replace version number in package.json files'
  continueOnError: true
  env:
    version: $(version)

- task: Npm@1
  displayName: 'npm update-versions'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run update-versions'

- powershell: |
   $fileName = 'package-lock.json'
   Get-ChildItem -Path ./tools -File | Where-Object {$_.Name -eq $fileName};
   Write-Host "`nDeleting any files listed above";
   Get-ChildItem -Path ./tools -File | Where-Object {$_.Name -eq $fileName} | Remove-Item -Force;
  displayName: 'Delete tools/package-lock.json. Maybe avoids intermittent error in \"npm run postinstall\" ENOENT: no such file or directory, lchown ''/Users/runner/.npm/_locks/staging-7c222bec8116519f.lock'''
  continueOnError: true

- task: Npm@1
  displayName: 'npm run postinstall'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run postinstall'

- task: Npm@1
  displayName: 'npm run build'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run build'

- powershell: |
   # All "check_api_for" Tasks should run only if the build succeeds,
   # And continue running even if another "check_api_for" task fails.
   
   Write-Host "##vso[task.setvariable variable=buildPassed;]true"
  displayName: 'Set "buildPassed" variable'

- task: Npm@1
  displayName: 'check_api_for botframework-schema'
  inputs:
    command: custom
    workingDir: 'libraries/botframework-schema'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botframework-streaming'
  inputs:
    command: custom
    workingDir: 'libraries/botframework-streaming'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botbuilder-core'
  inputs:
    command: custom
    workingDir: 'libraries/botbuilder-core'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botbuilder'
  inputs:
    command: custom
    workingDir: libraries/botbuilder
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botbuilder-ai'
  inputs:
    command: custom
    workingDir: 'libraries/botbuilder-ai'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botbuilder-applicationinsights'
  inputs:
    command: custom
    workingDir: 'libraries/botbuilder-applicationinsights'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botbuilder-azure'
  inputs:
    command: custom
    workingDir: 'libraries/botbuilder-azure'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botbuilder-dialogs'
  inputs:
    command: custom
    workingDir: 'libraries/botbuilder-dialogs'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botbuilder-testing'
  inputs:
    command: custom
    workingDir: 'libraries/botbuilder-testing'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: Npm@1
  displayName: 'check_api_for botframework-config'
  inputs:
    command: custom
    workingDir: 'libraries/botframework-config'
    verbose: false
    customCommand: 'run test:compat'
  condition: eq(variables.buildPassed, 'true')

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    verbosity: Normal
    sourceScanPath: libraries
    alertWarningLevel: Medium
    failOnAlert: true
    ignoreDirectories: 'libraries/teams-scenarios,swagger'
  enabled: false
  continueOnError: true

- powershell: 'Get-ChildItem env:* | sort-object name'
  displayName: 'Log environment variables'
  continueOnError: true

- powershell: |
   pushd ..
   Get-ChildItem -Recurse -Force | Where {$_.FullName -notlike "*node_modules*"}
  displayName: 'Dir workspace except node-modules (takes 12 seconds)'
  continueOnError: true
  condition: succeededOrFailed()
